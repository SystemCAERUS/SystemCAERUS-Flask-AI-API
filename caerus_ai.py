# -*- coding: utf-8 -*-
"""CAERUS_AI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m1KDQ3aouccCNgnPS_2A3ZpRGEwAWJq2

Import Libraries
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

"""Import DataSet"""

# Load the Excel file
data = pd.read_excel('dataset.xlsx')

data.head()

# Printing the shape of the dataframe
data.shape

# Total number of columns in the dataset
data.columns

# Information about the dataset
data.info()

# Checking if there is some null values or not
data.isnull()

# Checking if there is some null values or not
data.isnull().sum()

# Dropping less important features
df = data[['Department','Machine','Repair done by2']]
df.head()

# Dropping null values
df = df.dropna()

df.info()

X = data[['Department', 'Machine']]
Y = data['Repair done by2']
Y.unique()

# Perform label encoding on the target variable
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(Y)

label_mapping = pd.DataFrame({'Repairer Name': Y, 'Encoded Value': y})
label_mapping = label_mapping.drop_duplicates().sort_values('Encoded Value').reset_index(drop=True)

print(label_mapping)

# Perform one-hot encoding on the features
X = pd.get_dummies(X)
training_columns = list(X.columns)


# Split the dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the classification algorithm (Decision Tree classifier in this example)
clf = DecisionTreeClassifier()

# Train the model
clf.fit(X_train, y_train)

# Make predictions on the test set
y_pred = clf.predict(X_test)

# Decode the predicted labels back to original names
y_pred_decoded = label_encoder.inverse_transform(y_pred)

# Calculate accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print('Accuracy:', accuracy)

from sklearn.metrics import classification_report

# Convert target names to strings
target_names = label_encoder.classes_.astype(str)

# Calculate precision, recall, and F1-score
classification_report = classification_report(y_test, y_pred, target_names=target_names)
print(classification_report)

def predict_repairer(department, machine, clf, label_encoder, training_columns):
    # Prepare the input data for prediction
    input_data = pd.DataFrame({'Department': [department], 'Machine': [machine]})

    # Perform one-hot encoding on the input data
    input_data_encoded = pd.get_dummies(input_data)

    # Align the input data columns with the training columns
    input_data_encoded = input_data_encoded.reindex(columns=training_columns, fill_value=0)

    # Make predictions on the input data
    predicted_label = clf.predict(input_data_encoded)

    return predicted_label[0]

predicted_label = predict_repairer('PMG', 'Trepko', clf, label_encoder, training_columns)
predicted_repairer = label_encoder.inverse_transform([predicted_label])[0]
print('Predicted Repairer:', predicted_repairer)